 /*
 * MAIN Generated Driver File
 * 
 * @file main.c
 * 
 * @defgroup main MAIN
 * 
 * @brief This is the generated driver implementation file for the MAIN driver.
 *
 * @version MAIN Driver Version 1.0.2
 *
 * @version Package Version: 3.1.2
*/

/*
© [2024] Microchip Technology Inc. and its subsidiaries.

    Subject to your compliance with these terms, you may use Microchip 
    software and any derivatives exclusively with Microchip products. 
    You are responsible for complying with 3rd party license terms  
    applicable to your use of 3rd party software (including open source  
    software) that may accompany Microchip software. SOFTWARE IS ?AS IS.? 
    NO WARRANTIES, WHETHER EXPRESS, IMPLIED OR STATUTORY, APPLY TO THIS 
    SOFTWARE, INCLUDING ANY IMPLIED WARRANTIES OF NON-INFRINGEMENT,  
    MERCHANTABILITY, OR FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT 
    WILL MICROCHIP BE LIABLE FOR ANY INDIRECT, SPECIAL, PUNITIVE, 
    INCIDENTAL OR CONSEQUENTIAL LOSS, DAMAGE, COST OR EXPENSE OF ANY 
    KIND WHATSOEVER RELATED TO THE SOFTWARE, HOWEVER CAUSED, EVEN IF 
    MICROCHIP HAS BEEN ADVISED OF THE POSSIBILITY OR THE DAMAGES ARE 
    FORESEEABLE. TO THE FULLEST EXTENT ALLOWED BY LAW, MICROCHIP?S 
    TOTAL LIABILITY ON ALL CLAIMS RELATED TO THE SOFTWARE WILL NOT 
    EXCEED AMOUNT OF FEES, IF ANY, YOU PAID DIRECTLY TO MICROCHIP FOR 
    THIS SOFTWARE.
*/
#include "mcc_generated_files/system/system.h"  // Include the master header file generated by MCC
#include <stdio.h>

#define STRAP_PIN     PORTAbits.RA0 // Pin = hi -> master 
#define SLAVE_SELECT  PORTBbits.RB3 // chip/slave select
#define TIME_TO_READ  100           // time between reading sensor 
#define TICK_THRESHOLD 10 // Define an appropriate threshold for ticks

volatile uint16_t tick_counter = 0; // Timer tick count 
uint8_t high_byte; 
uint8_t low_byte; 
bool expecting_high_byte = true;

// Function declarations
void SPI_Write(uint16_t);
uint16_t SPI_Read(void);
void UART_SendChar(uint8_t);
uint8_t UART_ReceiveChar(void);
void TMP122_Init();
uint16_t read_temperature();
void Error_Handler(char *);
void ticker(void);
void reset_counter(void);

// Function implementations
void SPI_Write(uint16_t data) {
    SDI_SetDigitalOutput(); //set RB4 as output
    
    uint8_t buffer[2]; 
    buffer[0] = (data >> 8) & 0xFF; // High byte 
    buffer[1] = data & 0xFF; // Low byte 
    SPI1_BufferExchange(buffer, 2); // Send the buffer
    
}

uint16_t SPI_Read(void) {
    SDI_SetDigitalInput(); //set RB4 as input
    
    uint8_t buffer[2]; 
    uint16_t data; 
    SPI1_BufferExchange(buffer, 2); // Receive the buffer 
    if (buffer == 0xFFFF) {
        Error_Handler("SPI Read Error");
    }
    data = (buffer[0] << 8) | buffer[1]; // Combine high and low bytes
    
    return data;
}


void UART_SendChar(uint8_t data) {
    while (!EUSART1_IsTxReady());
    EUSART1_Write(data);
}

uint8_t UART_ReceiveChar(void) {
    while (!EUSART1_IsRxReady());
    uint8_t received_byte = RC1REG;                  // upon interrupt, get the most recent received value 
    if (tick_counter < TICK_THRESHOLD) { 
        // Received byte within threshold, it's the low byte 
        low_byte = received_byte; 
//        expecting_high_byte = true; 
    } else { 
        // Received byte after a long time, it's the high byte 
        high_byte = received_byte; 
//        expecting_high_byte = false; 
    } 
    reset_counter(); // Reset tick count after processing
}

void TMP122_Init(void) {
    SPI_Write(0x3E87);  // Initialize TMP122's high temp threshold to 125 degC
    SPI_Write(0x0007);  // Initialize TMP122's high temp threshold to 125 degC
}

uint16_t read_temperature(void) {
    return SPI_Read();  // Read temperature data
}

void Error_Handler(char *message) {
    // Handle error
    printf("Error: %s\n", message);
    while (1);
}

void ticker(void){
    tick_counter++; // increment this counter each TMR0 period (1 mS)) in which an interrupt is flagged
    // Interrupt flag cleared automatically in TMR0_ISR()
}

void reset_counter(void) {
    tick_counter = 0;
}

void main(void) {
    /*
     * SYSTEM_Initialize does the following
     * EUSART1
     * ABDEN disabled; WUE disabled; BRG16 16bit_generator; SCKP Non-Inverted; 
     * BAUD1CON = 0x48; 
     * 
     * ADDEN disabled; CREN enabled -> continuous reception; 
     * SREN disabled; RX9 8-bit; SPEN enabled -> UART enabled
     * RC1STA = 0x90; 
     * 
     * TX9D 0x0; BRGH hi_speed; SENDB sync_break_complete; SYNC asynchronous; 
     * TXEN enabled -> transmission enabled; TX9 8-bit; CSRC client; 
     * TX1STA = 0x26; 
     * 
     * SPBRGL 207; //9600 baud
     * SP1BRGL = 0xCF; 
     * 
     * SPBRGH 0; 
     * SP1BRGH = 0x0; 
     * 
     * EUSART2 
     * same as EUSART 1 
     */
    SYSTEM_Initialize();  // Initialize the system using MCC
    INTERRUPT_GlobalInterruptEnable();      
    INTERRUPT_PeripheralInterruptEnable();
    TMR0_PeriodMatchCallbackRegister(ticker);
    SPI1_Open(0); //SSP1STAT = 0x00 -> bit7 (SMP) Input data sampled at middle of data output time
                  //                -> bit6 (CKE) Transmit occurs on transition from Idle to active clock state
                  //SSP1CON1 = 0x02 -> bit[7:6] (WCOL:SSPOV) no collision, no overflow 
                  //                -> bit5 (SSPEN) Enables serial port and configures 
                  //                ->              SCK, SDO, SDI and SS as the source of the serial port pins
                  //                -> bit4 (CKP) Idle state for clock is a low level
                  //                -> bit[3:0] (SSPM) SPI Host mode, clock = FOSC/64
                  //SSP1CON3 = 0x10 -> bit4 (BOEN) SSPxBUF updates every time that a 
                  //                               new data byte is shifted in ignoring the BF bit 
                  //SSP1ADD  = 0x0f -> 125kHz

    IO_RA0_SetDigitalInput();  // Set STRAP_PIN as input

    if (STRAP_PIN) {
        // Master mode
        // CS/SS is output active low. This will select TMP122 permanently.
        CS_TRIS = 0; // set RB3 as Output
        CS_SetLow(); //set RB3 low to select TMP122
//        TMP122_Init();
        uint16_t temperature;

        while (1) {
            temperature = read_temperature(); // Get temperature data from TMP122
            UART_SendChar((temperature >> 8) & 0xFF);  //  high byte in SPI buffer
            UART_SendChar(temperature & 0xFF);  // Send low byte
            printf("Temperature: %u\n", temperature);  // Debugging output
            __delay_ms(TIME_TO_READ);  // Delay in milliseconds, default = 100 mS
        }
    } else {
        // Slave mode
        
        // CS/SS is input active low
        CS_TRIS = 1; // set RB3 as Input
        
        uint16_t data;

        while (1) {
//            if (expecting_high_byte == false){
                data = (high_byte << 8) | low_byte; // Combine high and low bytes
//            }
            if (SLAVE_SELECT == 0) {            // Transmit SPI data when CS/SS is low.
                SPI_Write(data);                // Send data via SPI
                printf("Sent data: %u\n", data);  // Debugging output
            }
        }
    }
}
